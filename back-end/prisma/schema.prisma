generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AuthProvider {
  local
  google
  microsoft
}

enum Role {
  ADMIN
  MEMBER
  OBSERVER
}

enum BoardVisibility {
  PUBLIC
  PRIVATE
  TEAM
}

model User {
  id           String       @id @default(uuid())
  role         Role
  name         String
  email        String       @unique
  userName     String       @unique
  passwordHash String
  authProvider AuthProvider
  isVerified   Boolean      @default(false)
  CreatedAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  providerId   String?

  boards       Board[]       @relation("OwnerBoards")
  memberships  BoardMember[]
  tasksCreated Task[]        @relation("TaskCreator")

  @@unique([authProvider, providerId], name: "AuthProviderAndIdUnique")
}

model Board {
  id          String          @id @default(uuid())
  ownerId     String
  title       String
  description String?
  visibility  BoardVisibility @default(PRIVATE)
  isArchived  Boolean         @default(false)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  owner   User          @relation("OwnerBoards", fields: [ownerId], references: [id])
  members BoardMember[]
  lists   List[]
  labels  Label[]
}

model BoardMember {
  boardId  String
  userId   String
  role     Role
  joinedAt DateTime @default(now())

  board Board @relation(fields: [boardId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@id([boardId, userId])
}

model List {
  id         String   @id @default(uuid())
  boardId    String
  title      String
  position   Int
  isArchived Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  board Board  @relation(fields: [boardId], references: [id])
  tasks Task[]
}

model Task {
  id          String    @id @default(uuid())
  listId      String
  creatorId   String
  title       String
  description String?
  position    Int
  status      String
  dueDate     DateTime?
  isArchived  Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  list    List        @relation(fields: [listId], references: [id])
  creator User        @relation("TaskCreator", fields: [creatorId], references: [id])
  labels  TaskLabel[]
}

model Label {
  id        String   @id @default(uuid())
  boardId   String
  name      String
  color     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  board Board       @relation(fields: [boardId], references: [id])
  tasks TaskLabel[]
}

model TaskLabel {
  taskId  String
  labelId String

  task  Task  @relation(fields: [taskId], references: [id])
  label Label @relation(fields: [labelId], references: [id])

  @@id([taskId, labelId])
}
